# coding: utf-8

"""
    Container Security APIs

    All features of the Container Security are available through REST APIs.<br/>Access support information at www.qualys.com/support/<br/><br/><b>Permissions:</b><br/>User must have the Container module enabled<br/>User must have API ACCESS permission  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qualys_cs_api.configuration import Configuration


class ScheduleRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filters': 'list[Filter]',
        'name': 'str',
        'on_demand': 'bool',
        'schedule': 'str'
    }

    attribute_map = {
        'filters': 'filters',
        'name': 'name',
        'on_demand': 'onDemand',
        'schedule': 'schedule'
    }

    def __init__(self, filters=None, name=None, on_demand=None, schedule=None, local_vars_configuration=None):  # noqa: E501
        """ScheduleRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filters = None
        self._name = None
        self._on_demand = None
        self._schedule = None
        self.discriminator = None

        if filters is not None:
            self.filters = filters
        if name is not None:
            self.name = name
        if on_demand is not None:
            self.on_demand = on_demand
        if schedule is not None:
            self.schedule = schedule

    @property
    def filters(self):
        """Gets the filters of this ScheduleRequest.  # noqa: E501


        :return: The filters of this ScheduleRequest.  # noqa: E501
        :rtype: list[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ScheduleRequest.


        :param filters: The filters of this ScheduleRequest.  # noqa: E501
        :type: list[Filter]
        """

        self._filters = filters

    @property
    def name(self):
        """Gets the name of this ScheduleRequest.  # noqa: E501


        :return: The name of this ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleRequest.


        :param name: The name of this ScheduleRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def on_demand(self):
        """Gets the on_demand of this ScheduleRequest.  # noqa: E501


        :return: The on_demand of this ScheduleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._on_demand

    @on_demand.setter
    def on_demand(self, on_demand):
        """Sets the on_demand of this ScheduleRequest.


        :param on_demand: The on_demand of this ScheduleRequest.  # noqa: E501
        :type: bool
        """

        self._on_demand = on_demand

    @property
    def schedule(self):
        """Gets the schedule of this ScheduleRequest.  # noqa: E501


        :return: The schedule of this ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ScheduleRequest.


        :param schedule: The schedule of this ScheduleRequest.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScheduleRequest):
            return True

        return self.to_dict() != other.to_dict()
