# coding: utf-8

"""
    Container Security APIs

    All features of the Container Security are available through REST APIs.<br/>Access support information at www.qualys.com/support/<br/><br/><b>Permissions:</b><br/>User must have the Container module enabled<br/>User must have API ACCESS permission  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qualys_cs_api.configuration import Configuration


class ImageAssociation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'containers': 'list[Container]',
        'drift_containers': 'list[Container]',
        'hosts': 'list[HostStats]'
    }

    attribute_map = {
        'containers': 'containers',
        'drift_containers': 'driftContainers',
        'hosts': 'hosts'
    }

    def __init__(self, containers=None, drift_containers=None, hosts=None, local_vars_configuration=None):  # noqa: E501
        """ImageAssociation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._containers = None
        self._drift_containers = None
        self._hosts = None
        self.discriminator = None

        if containers is not None:
            self.containers = containers
        if drift_containers is not None:
            self.drift_containers = drift_containers
        if hosts is not None:
            self.hosts = hosts

    @property
    def containers(self):
        """Gets the containers of this ImageAssociation.  # noqa: E501


        :return: The containers of this ImageAssociation.  # noqa: E501
        :rtype: list[Container]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ImageAssociation.


        :param containers: The containers of this ImageAssociation.  # noqa: E501
        :type: list[Container]
        """

        self._containers = containers

    @property
    def drift_containers(self):
        """Gets the drift_containers of this ImageAssociation.  # noqa: E501


        :return: The drift_containers of this ImageAssociation.  # noqa: E501
        :rtype: list[Container]
        """
        return self._drift_containers

    @drift_containers.setter
    def drift_containers(self, drift_containers):
        """Sets the drift_containers of this ImageAssociation.


        :param drift_containers: The drift_containers of this ImageAssociation.  # noqa: E501
        :type: list[Container]
        """

        self._drift_containers = drift_containers

    @property
    def hosts(self):
        """Gets the hosts of this ImageAssociation.  # noqa: E501


        :return: The hosts of this ImageAssociation.  # noqa: E501
        :rtype: list[HostStats]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this ImageAssociation.


        :param hosts: The hosts of this ImageAssociation.  # noqa: E501
        :type: list[HostStats]
        """

        self._hosts = hosts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageAssociation):
            return True

        return self.to_dict() != other.to_dict()
