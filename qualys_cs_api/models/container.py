# coding: utf-8

"""
    Container Security APIs

    All features of the Container Security are available through REST APIs.<br/>Access support information at www.qualys.com/support/<br/><br/><b>Permissions:</b><br/>User must have the Container module enabled<br/>User must have API ACCESS permission  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qualys_cs_api.configuration import Configuration


class Container(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'container_id': 'str',
        'created': 'str',
        'host': 'Host',
        'image_id': 'str',
        'image_uuid': 'str',
        'is_root': 'bool',
        'last_scanned': 'str',
        'name': 'str',
        'sha': 'str',
        'state': 'str',
        'state_changed': 'str',
        'uuid': 'str',
        'vulnerabilities': 'dict(str, int)'
    }

    attribute_map = {
        'container_id': 'containerId',
        'created': 'created',
        'host': 'host',
        'image_id': 'imageId',
        'image_uuid': 'imageUuid',
        'is_root': 'isRoot',
        'last_scanned': 'lastScanned',
        'name': 'name',
        'sha': 'sha',
        'state': 'state',
        'state_changed': 'stateChanged',
        'uuid': 'uuid',
        'vulnerabilities': 'vulnerabilities'
    }

    def __init__(self, container_id=None, created=None, host=None, image_id=None, image_uuid=None, is_root=None, last_scanned=None, name=None, sha=None, state=None, state_changed=None, uuid=None, vulnerabilities=None, local_vars_configuration=None):  # noqa: E501
        """Container - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._container_id = None
        self._created = None
        self._host = None
        self._image_id = None
        self._image_uuid = None
        self._is_root = None
        self._last_scanned = None
        self._name = None
        self._sha = None
        self._state = None
        self._state_changed = None
        self._uuid = None
        self._vulnerabilities = None
        self.discriminator = None

        if container_id is not None:
            self.container_id = container_id
        if created is not None:
            self.created = created
        if host is not None:
            self.host = host
        if image_id is not None:
            self.image_id = image_id
        if image_uuid is not None:
            self.image_uuid = image_uuid
        if is_root is not None:
            self.is_root = is_root
        if last_scanned is not None:
            self.last_scanned = last_scanned
        if name is not None:
            self.name = name
        if sha is not None:
            self.sha = sha
        if state is not None:
            self.state = state
        if state_changed is not None:
            self.state_changed = state_changed
        if uuid is not None:
            self.uuid = uuid
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities

    @property
    def container_id(self):
        """Gets the container_id of this Container.  # noqa: E501


        :return: The container_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Container.


        :param container_id: The container_id of this Container.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def created(self):
        """Gets the created of this Container.  # noqa: E501


        :return: The created of this Container.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Container.


        :param created: The created of this Container.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def host(self):
        """Gets the host of this Container.  # noqa: E501


        :return: The host of this Container.  # noqa: E501
        :rtype: Host
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Container.


        :param host: The host of this Container.  # noqa: E501
        :type: Host
        """

        self._host = host

    @property
    def image_id(self):
        """Gets the image_id of this Container.  # noqa: E501


        :return: The image_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this Container.


        :param image_id: The image_id of this Container.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def image_uuid(self):
        """Gets the image_uuid of this Container.  # noqa: E501


        :return: The image_uuid of this Container.  # noqa: E501
        :rtype: str
        """
        return self._image_uuid

    @image_uuid.setter
    def image_uuid(self, image_uuid):
        """Sets the image_uuid of this Container.


        :param image_uuid: The image_uuid of this Container.  # noqa: E501
        :type: str
        """

        self._image_uuid = image_uuid

    @property
    def is_root(self):
        """Gets the is_root of this Container.  # noqa: E501


        :return: The is_root of this Container.  # noqa: E501
        :rtype: bool
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root):
        """Sets the is_root of this Container.


        :param is_root: The is_root of this Container.  # noqa: E501
        :type: bool
        """

        self._is_root = is_root

    @property
    def last_scanned(self):
        """Gets the last_scanned of this Container.  # noqa: E501


        :return: The last_scanned of this Container.  # noqa: E501
        :rtype: str
        """
        return self._last_scanned

    @last_scanned.setter
    def last_scanned(self, last_scanned):
        """Sets the last_scanned of this Container.


        :param last_scanned: The last_scanned of this Container.  # noqa: E501
        :type: str
        """

        self._last_scanned = last_scanned

    @property
    def name(self):
        """Gets the name of this Container.  # noqa: E501


        :return: The name of this Container.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.


        :param name: The name of this Container.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sha(self):
        """Gets the sha of this Container.  # noqa: E501


        :return: The sha of this Container.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this Container.


        :param sha: The sha of this Container.  # noqa: E501
        :type: str
        """

        self._sha = sha

    @property
    def state(self):
        """Gets the state of this Container.  # noqa: E501


        :return: The state of this Container.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Container.


        :param state: The state of this Container.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATED", "RUNNING", "STOPPED", "PAUSED", "DELETED", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_changed(self):
        """Gets the state_changed of this Container.  # noqa: E501


        :return: The state_changed of this Container.  # noqa: E501
        :rtype: str
        """
        return self._state_changed

    @state_changed.setter
    def state_changed(self, state_changed):
        """Sets the state_changed of this Container.


        :param state_changed: The state_changed of this Container.  # noqa: E501
        :type: str
        """

        self._state_changed = state_changed

    @property
    def uuid(self):
        """Gets the uuid of this Container.  # noqa: E501


        :return: The uuid of this Container.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Container.


        :param uuid: The uuid of this Container.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this Container.  # noqa: E501


        :return: The vulnerabilities of this Container.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this Container.


        :param vulnerabilities: The vulnerabilities of this Container.  # noqa: E501
        :type: dict(str, int)
        """

        self._vulnerabilities = vulnerabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Container):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Container):
            return True

        return self.to_dict() != other.to_dict()
