# coding: utf-8

"""
    Container Security APIs

    All features of the Container Security are available through REST APIs.<br/>Access support information at www.qualys.com/support/<br/><br/><b>Permissions:</b><br/>User must have the Container module enabled<br/>User must have API ACCESS permission  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qualys_cs_api.configuration import Configuration


class ImageDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'architecture': 'str',
        'author': 'str',
        'created': 'str',
        'customer_uuid': 'str',
        'docker_version': 'str',
        'host': 'list[Host]',
        'image_id': 'str',
        'is_docker_hub_official': 'bool',
        'label': 'list[Label]',
        'last_scanned': 'str',
        'layers': 'list[Layer]',
        'layers_count': 'int',
        'operating_system': 'str',
        'registry_uuid': 'list[str]',
        'repo': 'list[Repo]',
        'sensor_uuid': 'list[str]',
        'sha': 'str',
        'size': 'int',
        'softwares': 'list[Software]',
        'source': 'list[str]',
        'total_vul_count': 'str',
        'users': 'list[str]',
        'uuid': 'str',
        'vulnerabilities': 'list[ServiceVulnerabilityDetails]'
    }

    attribute_map = {
        'architecture': 'architecture',
        'author': 'author',
        'created': 'created',
        'customer_uuid': 'customerUuid',
        'docker_version': 'dockerVersion',
        'host': 'host',
        'image_id': 'imageId',
        'is_docker_hub_official': 'isDockerHubOfficial',
        'label': 'label',
        'last_scanned': 'lastScanned',
        'layers': 'layers',
        'layers_count': 'layersCount',
        'operating_system': 'operatingSystem',
        'registry_uuid': 'registryUuid',
        'repo': 'repo',
        'sensor_uuid': 'sensorUuid',
        'sha': 'sha',
        'size': 'size',
        'softwares': 'softwares',
        'source': 'source',
        'total_vul_count': 'totalVulCount',
        'users': 'users',
        'uuid': 'uuid',
        'vulnerabilities': 'vulnerabilities'
    }

    def __init__(self, architecture=None, author=None, created=None, customer_uuid=None, docker_version=None, host=None, image_id=None, is_docker_hub_official=None, label=None, last_scanned=None, layers=None, layers_count=None, operating_system=None, registry_uuid=None, repo=None, sensor_uuid=None, sha=None, size=None, softwares=None, source=None, total_vul_count=None, users=None, uuid=None, vulnerabilities=None, local_vars_configuration=None):  # noqa: E501
        """ImageDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._architecture = None
        self._author = None
        self._created = None
        self._customer_uuid = None
        self._docker_version = None
        self._host = None
        self._image_id = None
        self._is_docker_hub_official = None
        self._label = None
        self._last_scanned = None
        self._layers = None
        self._layers_count = None
        self._operating_system = None
        self._registry_uuid = None
        self._repo = None
        self._sensor_uuid = None
        self._sha = None
        self._size = None
        self._softwares = None
        self._source = None
        self._total_vul_count = None
        self._users = None
        self._uuid = None
        self._vulnerabilities = None
        self.discriminator = None

        if architecture is not None:
            self.architecture = architecture
        if author is not None:
            self.author = author
        if created is not None:
            self.created = created
        if customer_uuid is not None:
            self.customer_uuid = customer_uuid
        if docker_version is not None:
            self.docker_version = docker_version
        if host is not None:
            self.host = host
        if image_id is not None:
            self.image_id = image_id
        if is_docker_hub_official is not None:
            self.is_docker_hub_official = is_docker_hub_official
        if label is not None:
            self.label = label
        if last_scanned is not None:
            self.last_scanned = last_scanned
        if layers is not None:
            self.layers = layers
        if layers_count is not None:
            self.layers_count = layers_count
        if operating_system is not None:
            self.operating_system = operating_system
        if registry_uuid is not None:
            self.registry_uuid = registry_uuid
        if repo is not None:
            self.repo = repo
        if sensor_uuid is not None:
            self.sensor_uuid = sensor_uuid
        if sha is not None:
            self.sha = sha
        if size is not None:
            self.size = size
        if softwares is not None:
            self.softwares = softwares
        if source is not None:
            self.source = source
        if total_vul_count is not None:
            self.total_vul_count = total_vul_count
        if users is not None:
            self.users = users
        if uuid is not None:
            self.uuid = uuid
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities

    @property
    def architecture(self):
        """Gets the architecture of this ImageDetails.  # noqa: E501


        :return: The architecture of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this ImageDetails.


        :param architecture: The architecture of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    @property
    def author(self):
        """Gets the author of this ImageDetails.  # noqa: E501


        :return: The author of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ImageDetails.


        :param author: The author of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def created(self):
        """Gets the created of this ImageDetails.  # noqa: E501


        :return: The created of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImageDetails.


        :param created: The created of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def customer_uuid(self):
        """Gets the customer_uuid of this ImageDetails.  # noqa: E501


        :return: The customer_uuid of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_uuid

    @customer_uuid.setter
    def customer_uuid(self, customer_uuid):
        """Sets the customer_uuid of this ImageDetails.


        :param customer_uuid: The customer_uuid of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._customer_uuid = customer_uuid

    @property
    def docker_version(self):
        """Gets the docker_version of this ImageDetails.  # noqa: E501


        :return: The docker_version of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this ImageDetails.


        :param docker_version: The docker_version of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._docker_version = docker_version

    @property
    def host(self):
        """Gets the host of this ImageDetails.  # noqa: E501


        :return: The host of this ImageDetails.  # noqa: E501
        :rtype: list[Host]
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ImageDetails.


        :param host: The host of this ImageDetails.  # noqa: E501
        :type: list[Host]
        """

        self._host = host

    @property
    def image_id(self):
        """Gets the image_id of this ImageDetails.  # noqa: E501


        :return: The image_id of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ImageDetails.


        :param image_id: The image_id of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def is_docker_hub_official(self):
        """Gets the is_docker_hub_official of this ImageDetails.  # noqa: E501


        :return: The is_docker_hub_official of this ImageDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_docker_hub_official

    @is_docker_hub_official.setter
    def is_docker_hub_official(self, is_docker_hub_official):
        """Sets the is_docker_hub_official of this ImageDetails.


        :param is_docker_hub_official: The is_docker_hub_official of this ImageDetails.  # noqa: E501
        :type: bool
        """

        self._is_docker_hub_official = is_docker_hub_official

    @property
    def label(self):
        """Gets the label of this ImageDetails.  # noqa: E501


        :return: The label of this ImageDetails.  # noqa: E501
        :rtype: list[Label]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ImageDetails.


        :param label: The label of this ImageDetails.  # noqa: E501
        :type: list[Label]
        """

        self._label = label

    @property
    def last_scanned(self):
        """Gets the last_scanned of this ImageDetails.  # noqa: E501


        :return: The last_scanned of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_scanned

    @last_scanned.setter
    def last_scanned(self, last_scanned):
        """Sets the last_scanned of this ImageDetails.


        :param last_scanned: The last_scanned of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._last_scanned = last_scanned

    @property
    def layers(self):
        """Gets the layers of this ImageDetails.  # noqa: E501


        :return: The layers of this ImageDetails.  # noqa: E501
        :rtype: list[Layer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this ImageDetails.


        :param layers: The layers of this ImageDetails.  # noqa: E501
        :type: list[Layer]
        """

        self._layers = layers

    @property
    def layers_count(self):
        """Gets the layers_count of this ImageDetails.  # noqa: E501


        :return: The layers_count of this ImageDetails.  # noqa: E501
        :rtype: int
        """
        return self._layers_count

    @layers_count.setter
    def layers_count(self, layers_count):
        """Sets the layers_count of this ImageDetails.


        :param layers_count: The layers_count of this ImageDetails.  # noqa: E501
        :type: int
        """

        self._layers_count = layers_count

    @property
    def operating_system(self):
        """Gets the operating_system of this ImageDetails.  # noqa: E501


        :return: The operating_system of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this ImageDetails.


        :param operating_system: The operating_system of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def registry_uuid(self):
        """Gets the registry_uuid of this ImageDetails.  # noqa: E501


        :return: The registry_uuid of this ImageDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._registry_uuid

    @registry_uuid.setter
    def registry_uuid(self, registry_uuid):
        """Sets the registry_uuid of this ImageDetails.


        :param registry_uuid: The registry_uuid of this ImageDetails.  # noqa: E501
        :type: list[str]
        """

        self._registry_uuid = registry_uuid

    @property
    def repo(self):
        """Gets the repo of this ImageDetails.  # noqa: E501


        :return: The repo of this ImageDetails.  # noqa: E501
        :rtype: list[Repo]
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this ImageDetails.


        :param repo: The repo of this ImageDetails.  # noqa: E501
        :type: list[Repo]
        """

        self._repo = repo

    @property
    def sensor_uuid(self):
        """Gets the sensor_uuid of this ImageDetails.  # noqa: E501


        :return: The sensor_uuid of this ImageDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._sensor_uuid

    @sensor_uuid.setter
    def sensor_uuid(self, sensor_uuid):
        """Sets the sensor_uuid of this ImageDetails.


        :param sensor_uuid: The sensor_uuid of this ImageDetails.  # noqa: E501
        :type: list[str]
        """

        self._sensor_uuid = sensor_uuid

    @property
    def sha(self):
        """Gets the sha of this ImageDetails.  # noqa: E501


        :return: The sha of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this ImageDetails.


        :param sha: The sha of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._sha = sha

    @property
    def size(self):
        """Gets the size of this ImageDetails.  # noqa: E501


        :return: The size of this ImageDetails.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImageDetails.


        :param size: The size of this ImageDetails.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def softwares(self):
        """Gets the softwares of this ImageDetails.  # noqa: E501


        :return: The softwares of this ImageDetails.  # noqa: E501
        :rtype: list[Software]
        """
        return self._softwares

    @softwares.setter
    def softwares(self, softwares):
        """Sets the softwares of this ImageDetails.


        :param softwares: The softwares of this ImageDetails.  # noqa: E501
        :type: list[Software]
        """

        self._softwares = softwares

    @property
    def source(self):
        """Gets the source of this ImageDetails.  # noqa: E501


        :return: The source of this ImageDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ImageDetails.


        :param source: The source of this ImageDetails.  # noqa: E501
        :type: list[str]
        """

        self._source = source

    @property
    def total_vul_count(self):
        """Gets the total_vul_count of this ImageDetails.  # noqa: E501


        :return: The total_vul_count of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._total_vul_count

    @total_vul_count.setter
    def total_vul_count(self, total_vul_count):
        """Sets the total_vul_count of this ImageDetails.


        :param total_vul_count: The total_vul_count of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._total_vul_count = total_vul_count

    @property
    def users(self):
        """Gets the users of this ImageDetails.  # noqa: E501


        :return: The users of this ImageDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ImageDetails.


        :param users: The users of this ImageDetails.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def uuid(self):
        """Gets the uuid of this ImageDetails.  # noqa: E501


        :return: The uuid of this ImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ImageDetails.


        :param uuid: The uuid of this ImageDetails.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this ImageDetails.  # noqa: E501


        :return: The vulnerabilities of this ImageDetails.  # noqa: E501
        :rtype: list[ServiceVulnerabilityDetails]
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this ImageDetails.


        :param vulnerabilities: The vulnerabilities of this ImageDetails.  # noqa: E501
        :type: list[ServiceVulnerabilityDetails]
        """

        self._vulnerabilities = vulnerabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageDetails):
            return True

        return self.to_dict() != other.to_dict()
