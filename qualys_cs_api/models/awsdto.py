# coding: utf-8

"""
    Container Security APIs

    All features of the Container Security are available through REST APIs.<br/>Access support information at www.qualys.com/support/<br/><br/><b>Permissions:</b><br/>User must have the Container module enabled<br/>User must have API ACCESS permission  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qualys_cs_api.configuration import Configuration


class AWSDTO(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'arn': 'str',
        'description': 'str',
        'name': 'str',
        'region': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'arn': 'arn',
        'description': 'description',
        'name': 'name',
        'region': 'region'
    }

    def __init__(self, account_id=None, arn=None, description=None, name=None, region=None, local_vars_configuration=None):  # noqa: E501
        """AWSDTO - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._arn = None
        self._description = None
        self._name = None
        self._region = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if arn is not None:
            self.arn = arn
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region

    @property
    def account_id(self):
        """Gets the account_id of this AWSDTO.  # noqa: E501


        :return: The account_id of this AWSDTO.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AWSDTO.


        :param account_id: The account_id of this AWSDTO.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def arn(self):
        """Gets the arn of this AWSDTO.  # noqa: E501


        :return: The arn of this AWSDTO.  # noqa: E501
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AWSDTO.


        :param arn: The arn of this AWSDTO.  # noqa: E501
        :type: str
        """

        self._arn = arn

    @property
    def description(self):
        """Gets the description of this AWSDTO.  # noqa: E501


        :return: The description of this AWSDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AWSDTO.


        :param description: The description of this AWSDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this AWSDTO.  # noqa: E501


        :return: The name of this AWSDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AWSDTO.


        :param name: The name of this AWSDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this AWSDTO.  # noqa: E501


        :return: The region of this AWSDTO.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AWSDTO.


        :param region: The region of this AWSDTO.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AWSDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AWSDTO):
            return True

        return self.to_dict() != other.to_dict()
