# coding: utf-8

"""
    Container Security APIs

    All features of the Container Security are available through REST APIs.<br/>Access support information at www.qualys.com/support/<br/><br/><b>Permissions:</b><br/>User must have the Container module enabled<br/>User must have API ACCESS permission  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qualys_cs_api.configuration import Configuration


class DriftVulnerability(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'age_in_days': 'int',
        'auth_type': 'list[str]',
        'category': 'str',
        'container_result': 'str',
        'customer_severity': 'int',
        'cveids': 'list[str]',
        'cvss3_info': 'Cvss3Info',
        'cvss_info': 'CvssInfo',
        'discovery_type': 'list[str]',
        'first_found': 'str',
        'fixed': 'str',
        'image_result': 'str',
        'last_found': 'str',
        'non_exploitable_config': 'bool',
        'non_running_kernel': 'bool',
        'os': 'str',
        'patch_available': 'bool',
        'port': 'str',
        'product': 'list[str]',
        'published': 'int',
        'qid': 'int',
        'reason': 'str',
        'result': 'str',
        'risk': 'int',
        'running_service': 'bool',
        'severity': 'int',
        'software': 'list[Software]',
        'source': 'str',
        'status': 'str',
        'supported_by': 'list[str]',
        'threat_intel': 'ThreatIntel',
        'title': 'str',
        'type_detected': 'str',
        'vendor': 'list[str]',
        'vulnerability': 'int'
    }

    attribute_map = {
        'age_in_days': 'ageInDays',
        'auth_type': 'authType',
        'category': 'category',
        'container_result': 'containerResult',
        'customer_severity': 'customerSeverity',
        'cveids': 'cveids',
        'cvss3_info': 'cvss3Info',
        'cvss_info': 'cvssInfo',
        'discovery_type': 'discoveryType',
        'first_found': 'firstFound',
        'fixed': 'fixed',
        'image_result': 'imageResult',
        'last_found': 'lastFound',
        'non_exploitable_config': 'nonExploitableConfig',
        'non_running_kernel': 'nonRunningKernel',
        'os': 'os',
        'patch_available': 'patchAvailable',
        'port': 'port',
        'product': 'product',
        'published': 'published',
        'qid': 'qid',
        'reason': 'reason',
        'result': 'result',
        'risk': 'risk',
        'running_service': 'runningService',
        'severity': 'severity',
        'software': 'software',
        'source': 'source',
        'status': 'status',
        'supported_by': 'supportedBy',
        'threat_intel': 'threatIntel',
        'title': 'title',
        'type_detected': 'typeDetected',
        'vendor': 'vendor',
        'vulnerability': 'vulnerability'
    }

    def __init__(self, age_in_days=None, auth_type=None, category=None, container_result=None, customer_severity=None, cveids=None, cvss3_info=None, cvss_info=None, discovery_type=None, first_found=None, fixed=None, image_result=None, last_found=None, non_exploitable_config=None, non_running_kernel=None, os=None, patch_available=None, port=None, product=None, published=None, qid=None, reason=None, result=None, risk=None, running_service=None, severity=None, software=None, source=None, status=None, supported_by=None, threat_intel=None, title=None, type_detected=None, vendor=None, vulnerability=None, local_vars_configuration=None):  # noqa: E501
        """DriftVulnerability - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._age_in_days = None
        self._auth_type = None
        self._category = None
        self._container_result = None
        self._customer_severity = None
        self._cveids = None
        self._cvss3_info = None
        self._cvss_info = None
        self._discovery_type = None
        self._first_found = None
        self._fixed = None
        self._image_result = None
        self._last_found = None
        self._non_exploitable_config = None
        self._non_running_kernel = None
        self._os = None
        self._patch_available = None
        self._port = None
        self._product = None
        self._published = None
        self._qid = None
        self._reason = None
        self._result = None
        self._risk = None
        self._running_service = None
        self._severity = None
        self._software = None
        self._source = None
        self._status = None
        self._supported_by = None
        self._threat_intel = None
        self._title = None
        self._type_detected = None
        self._vendor = None
        self._vulnerability = None
        self.discriminator = None

        if age_in_days is not None:
            self.age_in_days = age_in_days
        if auth_type is not None:
            self.auth_type = auth_type
        if category is not None:
            self.category = category
        if container_result is not None:
            self.container_result = container_result
        if customer_severity is not None:
            self.customer_severity = customer_severity
        if cveids is not None:
            self.cveids = cveids
        if cvss3_info is not None:
            self.cvss3_info = cvss3_info
        if cvss_info is not None:
            self.cvss_info = cvss_info
        if discovery_type is not None:
            self.discovery_type = discovery_type
        if first_found is not None:
            self.first_found = first_found
        if fixed is not None:
            self.fixed = fixed
        if image_result is not None:
            self.image_result = image_result
        if last_found is not None:
            self.last_found = last_found
        if non_exploitable_config is not None:
            self.non_exploitable_config = non_exploitable_config
        if non_running_kernel is not None:
            self.non_running_kernel = non_running_kernel
        if os is not None:
            self.os = os
        if patch_available is not None:
            self.patch_available = patch_available
        if port is not None:
            self.port = port
        if product is not None:
            self.product = product
        if published is not None:
            self.published = published
        if qid is not None:
            self.qid = qid
        if reason is not None:
            self.reason = reason
        if result is not None:
            self.result = result
        if risk is not None:
            self.risk = risk
        if running_service is not None:
            self.running_service = running_service
        if severity is not None:
            self.severity = severity
        if software is not None:
            self.software = software
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status
        if supported_by is not None:
            self.supported_by = supported_by
        if threat_intel is not None:
            self.threat_intel = threat_intel
        if title is not None:
            self.title = title
        if type_detected is not None:
            self.type_detected = type_detected
        if vendor is not None:
            self.vendor = vendor
        if vulnerability is not None:
            self.vulnerability = vulnerability

    @property
    def age_in_days(self):
        """Gets the age_in_days of this DriftVulnerability.  # noqa: E501


        :return: The age_in_days of this DriftVulnerability.  # noqa: E501
        :rtype: int
        """
        return self._age_in_days

    @age_in_days.setter
    def age_in_days(self, age_in_days):
        """Sets the age_in_days of this DriftVulnerability.


        :param age_in_days: The age_in_days of this DriftVulnerability.  # noqa: E501
        :type: int
        """

        self._age_in_days = age_in_days

    @property
    def auth_type(self):
        """Gets the auth_type of this DriftVulnerability.  # noqa: E501


        :return: The auth_type of this DriftVulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this DriftVulnerability.


        :param auth_type: The auth_type of this DriftVulnerability.  # noqa: E501
        :type: list[str]
        """

        self._auth_type = auth_type

    @property
    def category(self):
        """Gets the category of this DriftVulnerability.  # noqa: E501


        :return: The category of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DriftVulnerability.


        :param category: The category of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def container_result(self):
        """Gets the container_result of this DriftVulnerability.  # noqa: E501


        :return: The container_result of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._container_result

    @container_result.setter
    def container_result(self, container_result):
        """Sets the container_result of this DriftVulnerability.


        :param container_result: The container_result of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._container_result = container_result

    @property
    def customer_severity(self):
        """Gets the customer_severity of this DriftVulnerability.  # noqa: E501


        :return: The customer_severity of this DriftVulnerability.  # noqa: E501
        :rtype: int
        """
        return self._customer_severity

    @customer_severity.setter
    def customer_severity(self, customer_severity):
        """Sets the customer_severity of this DriftVulnerability.


        :param customer_severity: The customer_severity of this DriftVulnerability.  # noqa: E501
        :type: int
        """

        self._customer_severity = customer_severity

    @property
    def cveids(self):
        """Gets the cveids of this DriftVulnerability.  # noqa: E501


        :return: The cveids of this DriftVulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._cveids

    @cveids.setter
    def cveids(self, cveids):
        """Sets the cveids of this DriftVulnerability.


        :param cveids: The cveids of this DriftVulnerability.  # noqa: E501
        :type: list[str]
        """

        self._cveids = cveids

    @property
    def cvss3_info(self):
        """Gets the cvss3_info of this DriftVulnerability.  # noqa: E501


        :return: The cvss3_info of this DriftVulnerability.  # noqa: E501
        :rtype: Cvss3Info
        """
        return self._cvss3_info

    @cvss3_info.setter
    def cvss3_info(self, cvss3_info):
        """Sets the cvss3_info of this DriftVulnerability.


        :param cvss3_info: The cvss3_info of this DriftVulnerability.  # noqa: E501
        :type: Cvss3Info
        """

        self._cvss3_info = cvss3_info

    @property
    def cvss_info(self):
        """Gets the cvss_info of this DriftVulnerability.  # noqa: E501


        :return: The cvss_info of this DriftVulnerability.  # noqa: E501
        :rtype: CvssInfo
        """
        return self._cvss_info

    @cvss_info.setter
    def cvss_info(self, cvss_info):
        """Sets the cvss_info of this DriftVulnerability.


        :param cvss_info: The cvss_info of this DriftVulnerability.  # noqa: E501
        :type: CvssInfo
        """

        self._cvss_info = cvss_info

    @property
    def discovery_type(self):
        """Gets the discovery_type of this DriftVulnerability.  # noqa: E501


        :return: The discovery_type of this DriftVulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._discovery_type

    @discovery_type.setter
    def discovery_type(self, discovery_type):
        """Sets the discovery_type of this DriftVulnerability.


        :param discovery_type: The discovery_type of this DriftVulnerability.  # noqa: E501
        :type: list[str]
        """

        self._discovery_type = discovery_type

    @property
    def first_found(self):
        """Gets the first_found of this DriftVulnerability.  # noqa: E501


        :return: The first_found of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._first_found

    @first_found.setter
    def first_found(self, first_found):
        """Sets the first_found of this DriftVulnerability.


        :param first_found: The first_found of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._first_found = first_found

    @property
    def fixed(self):
        """Gets the fixed of this DriftVulnerability.  # noqa: E501


        :return: The fixed of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this DriftVulnerability.


        :param fixed: The fixed of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._fixed = fixed

    @property
    def image_result(self):
        """Gets the image_result of this DriftVulnerability.  # noqa: E501


        :return: The image_result of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._image_result

    @image_result.setter
    def image_result(self, image_result):
        """Sets the image_result of this DriftVulnerability.


        :param image_result: The image_result of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._image_result = image_result

    @property
    def last_found(self):
        """Gets the last_found of this DriftVulnerability.  # noqa: E501


        :return: The last_found of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._last_found

    @last_found.setter
    def last_found(self, last_found):
        """Sets the last_found of this DriftVulnerability.


        :param last_found: The last_found of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._last_found = last_found

    @property
    def non_exploitable_config(self):
        """Gets the non_exploitable_config of this DriftVulnerability.  # noqa: E501


        :return: The non_exploitable_config of this DriftVulnerability.  # noqa: E501
        :rtype: bool
        """
        return self._non_exploitable_config

    @non_exploitable_config.setter
    def non_exploitable_config(self, non_exploitable_config):
        """Sets the non_exploitable_config of this DriftVulnerability.


        :param non_exploitable_config: The non_exploitable_config of this DriftVulnerability.  # noqa: E501
        :type: bool
        """

        self._non_exploitable_config = non_exploitable_config

    @property
    def non_running_kernel(self):
        """Gets the non_running_kernel of this DriftVulnerability.  # noqa: E501


        :return: The non_running_kernel of this DriftVulnerability.  # noqa: E501
        :rtype: bool
        """
        return self._non_running_kernel

    @non_running_kernel.setter
    def non_running_kernel(self, non_running_kernel):
        """Sets the non_running_kernel of this DriftVulnerability.


        :param non_running_kernel: The non_running_kernel of this DriftVulnerability.  # noqa: E501
        :type: bool
        """

        self._non_running_kernel = non_running_kernel

    @property
    def os(self):
        """Gets the os of this DriftVulnerability.  # noqa: E501


        :return: The os of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this DriftVulnerability.


        :param os: The os of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def patch_available(self):
        """Gets the patch_available of this DriftVulnerability.  # noqa: E501


        :return: The patch_available of this DriftVulnerability.  # noqa: E501
        :rtype: bool
        """
        return self._patch_available

    @patch_available.setter
    def patch_available(self, patch_available):
        """Sets the patch_available of this DriftVulnerability.


        :param patch_available: The patch_available of this DriftVulnerability.  # noqa: E501
        :type: bool
        """

        self._patch_available = patch_available

    @property
    def port(self):
        """Gets the port of this DriftVulnerability.  # noqa: E501


        :return: The port of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DriftVulnerability.


        :param port: The port of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def product(self):
        """Gets the product of this DriftVulnerability.  # noqa: E501


        :return: The product of this DriftVulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this DriftVulnerability.


        :param product: The product of this DriftVulnerability.  # noqa: E501
        :type: list[str]
        """

        self._product = product

    @property
    def published(self):
        """Gets the published of this DriftVulnerability.  # noqa: E501


        :return: The published of this DriftVulnerability.  # noqa: E501
        :rtype: int
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this DriftVulnerability.


        :param published: The published of this DriftVulnerability.  # noqa: E501
        :type: int
        """

        self._published = published

    @property
    def qid(self):
        """Gets the qid of this DriftVulnerability.  # noqa: E501


        :return: The qid of this DriftVulnerability.  # noqa: E501
        :rtype: int
        """
        return self._qid

    @qid.setter
    def qid(self, qid):
        """Sets the qid of this DriftVulnerability.


        :param qid: The qid of this DriftVulnerability.  # noqa: E501
        :type: int
        """

        self._qid = qid

    @property
    def reason(self):
        """Gets the reason of this DriftVulnerability.  # noqa: E501


        :return: The reason of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DriftVulnerability.


        :param reason: The reason of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def result(self):
        """Gets the result of this DriftVulnerability.  # noqa: E501


        :return: The result of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this DriftVulnerability.


        :param result: The result of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def risk(self):
        """Gets the risk of this DriftVulnerability.  # noqa: E501


        :return: The risk of this DriftVulnerability.  # noqa: E501
        :rtype: int
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this DriftVulnerability.


        :param risk: The risk of this DriftVulnerability.  # noqa: E501
        :type: int
        """

        self._risk = risk

    @property
    def running_service(self):
        """Gets the running_service of this DriftVulnerability.  # noqa: E501


        :return: The running_service of this DriftVulnerability.  # noqa: E501
        :rtype: bool
        """
        return self._running_service

    @running_service.setter
    def running_service(self, running_service):
        """Sets the running_service of this DriftVulnerability.


        :param running_service: The running_service of this DriftVulnerability.  # noqa: E501
        :type: bool
        """

        self._running_service = running_service

    @property
    def severity(self):
        """Gets the severity of this DriftVulnerability.  # noqa: E501


        :return: The severity of this DriftVulnerability.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DriftVulnerability.


        :param severity: The severity of this DriftVulnerability.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def software(self):
        """Gets the software of this DriftVulnerability.  # noqa: E501


        :return: The software of this DriftVulnerability.  # noqa: E501
        :rtype: list[Software]
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this DriftVulnerability.


        :param software: The software of this DriftVulnerability.  # noqa: E501
        :type: list[Software]
        """

        self._software = software

    @property
    def source(self):
        """Gets the source of this DriftVulnerability.  # noqa: E501


        :return: The source of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DriftVulnerability.


        :param source: The source of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this DriftVulnerability.  # noqa: E501


        :return: The status of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DriftVulnerability.


        :param status: The status of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def supported_by(self):
        """Gets the supported_by of this DriftVulnerability.  # noqa: E501


        :return: The supported_by of this DriftVulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_by

    @supported_by.setter
    def supported_by(self, supported_by):
        """Sets the supported_by of this DriftVulnerability.


        :param supported_by: The supported_by of this DriftVulnerability.  # noqa: E501
        :type: list[str]
        """

        self._supported_by = supported_by

    @property
    def threat_intel(self):
        """Gets the threat_intel of this DriftVulnerability.  # noqa: E501


        :return: The threat_intel of this DriftVulnerability.  # noqa: E501
        :rtype: ThreatIntel
        """
        return self._threat_intel

    @threat_intel.setter
    def threat_intel(self, threat_intel):
        """Sets the threat_intel of this DriftVulnerability.


        :param threat_intel: The threat_intel of this DriftVulnerability.  # noqa: E501
        :type: ThreatIntel
        """

        self._threat_intel = threat_intel

    @property
    def title(self):
        """Gets the title of this DriftVulnerability.  # noqa: E501


        :return: The title of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DriftVulnerability.


        :param title: The title of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type_detected(self):
        """Gets the type_detected of this DriftVulnerability.  # noqa: E501


        :return: The type_detected of this DriftVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._type_detected

    @type_detected.setter
    def type_detected(self, type_detected):
        """Sets the type_detected of this DriftVulnerability.


        :param type_detected: The type_detected of this DriftVulnerability.  # noqa: E501
        :type: str
        """

        self._type_detected = type_detected

    @property
    def vendor(self):
        """Gets the vendor of this DriftVulnerability.  # noqa: E501


        :return: The vendor of this DriftVulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this DriftVulnerability.


        :param vendor: The vendor of this DriftVulnerability.  # noqa: E501
        :type: list[str]
        """

        self._vendor = vendor

    @property
    def vulnerability(self):
        """Gets the vulnerability of this DriftVulnerability.  # noqa: E501


        :return: The vulnerability of this DriftVulnerability.  # noqa: E501
        :rtype: int
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this DriftVulnerability.


        :param vulnerability: The vulnerability of this DriftVulnerability.  # noqa: E501
        :type: int
        """

        self._vulnerability = vulnerability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriftVulnerability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriftVulnerability):
            return True

        return self.to_dict() != other.to_dict()
