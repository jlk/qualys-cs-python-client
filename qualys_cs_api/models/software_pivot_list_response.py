# coding: utf-8

"""
    Container Security APIs

    All features of the Container Security are available through REST APIs.<br/>Access support information at www.qualys.com/support/<br/><br/><b>Permissions:</b><br/>User must have the Container module enabled<br/>User must have API ACCESS permission  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qualys_cs_api.configuration import Configuration


class SoftwarePivotListResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count': 'int',
        'data': 'list[InstalledSoftware]',
        'drift_software_count_by_drift_reason': 'dict(str, int)',
        'drift_software_count_by_severity': 'dict(str, int)',
        'software_count_by_severity': 'dict(str, int)'
    }

    attribute_map = {
        'count': 'count',
        'data': 'data',
        'drift_software_count_by_drift_reason': 'driftSoftwareCountByDriftReason',
        'drift_software_count_by_severity': 'driftSoftwareCountBySeverity',
        'software_count_by_severity': 'softwareCountBySeverity'
    }

    def __init__(self, count=None, data=None, drift_software_count_by_drift_reason=None, drift_software_count_by_severity=None, software_count_by_severity=None, local_vars_configuration=None):  # noqa: E501
        """SoftwarePivotListResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._count = None
        self._data = None
        self._drift_software_count_by_drift_reason = None
        self._drift_software_count_by_severity = None
        self._software_count_by_severity = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if data is not None:
            self.data = data
        if drift_software_count_by_drift_reason is not None:
            self.drift_software_count_by_drift_reason = drift_software_count_by_drift_reason
        if drift_software_count_by_severity is not None:
            self.drift_software_count_by_severity = drift_software_count_by_severity
        if software_count_by_severity is not None:
            self.software_count_by_severity = software_count_by_severity

    @property
    def count(self):
        """Gets the count of this SoftwarePivotListResponse.  # noqa: E501


        :return: The count of this SoftwarePivotListResponse.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SoftwarePivotListResponse.


        :param count: The count of this SoftwarePivotListResponse.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def data(self):
        """Gets the data of this SoftwarePivotListResponse.  # noqa: E501


        :return: The data of this SoftwarePivotListResponse.  # noqa: E501
        :rtype: list[InstalledSoftware]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SoftwarePivotListResponse.


        :param data: The data of this SoftwarePivotListResponse.  # noqa: E501
        :type: list[InstalledSoftware]
        """

        self._data = data

    @property
    def drift_software_count_by_drift_reason(self):
        """Gets the drift_software_count_by_drift_reason of this SoftwarePivotListResponse.  # noqa: E501


        :return: The drift_software_count_by_drift_reason of this SoftwarePivotListResponse.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._drift_software_count_by_drift_reason

    @drift_software_count_by_drift_reason.setter
    def drift_software_count_by_drift_reason(self, drift_software_count_by_drift_reason):
        """Sets the drift_software_count_by_drift_reason of this SoftwarePivotListResponse.


        :param drift_software_count_by_drift_reason: The drift_software_count_by_drift_reason of this SoftwarePivotListResponse.  # noqa: E501
        :type: dict(str, int)
        """

        self._drift_software_count_by_drift_reason = drift_software_count_by_drift_reason

    @property
    def drift_software_count_by_severity(self):
        """Gets the drift_software_count_by_severity of this SoftwarePivotListResponse.  # noqa: E501


        :return: The drift_software_count_by_severity of this SoftwarePivotListResponse.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._drift_software_count_by_severity

    @drift_software_count_by_severity.setter
    def drift_software_count_by_severity(self, drift_software_count_by_severity):
        """Sets the drift_software_count_by_severity of this SoftwarePivotListResponse.


        :param drift_software_count_by_severity: The drift_software_count_by_severity of this SoftwarePivotListResponse.  # noqa: E501
        :type: dict(str, int)
        """

        self._drift_software_count_by_severity = drift_software_count_by_severity

    @property
    def software_count_by_severity(self):
        """Gets the software_count_by_severity of this SoftwarePivotListResponse.  # noqa: E501


        :return: The software_count_by_severity of this SoftwarePivotListResponse.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._software_count_by_severity

    @software_count_by_severity.setter
    def software_count_by_severity(self, software_count_by_severity):
        """Sets the software_count_by_severity of this SoftwarePivotListResponse.


        :param software_count_by_severity: The software_count_by_severity of this SoftwarePivotListResponse.  # noqa: E501
        :type: dict(str, int)
        """

        self._software_count_by_severity = software_count_by_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwarePivotListResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SoftwarePivotListResponse):
            return True

        return self.to_dict() != other.to_dict()
