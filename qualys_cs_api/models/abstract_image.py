# coding: utf-8

"""
    Container Security APIs

    All features of the Container Security are available through REST APIs.<br/>Access support information at www.qualys.com/support/<br/><br/><b>Permissions:</b><br/>User must have the Container module enabled<br/>User must have API ACCESS permission  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from qualys_cs_api.configuration import Configuration


class AbstractImage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'associated_containers_count': 'int',
        'associated_hosts_count': 'int',
        'created': 'str',
        'image_id': 'str',
        'is_docker_hub_official': 'bool',
        'last_scanned': 'str',
        'registry_uuid': 'list[str]',
        'repo': 'list[Repo]',
        'sha': 'str',
        'size': 'int',
        'source': 'list[str]',
        'uuid': 'str',
        'vulnerabilities': 'dict(str, int)'
    }

    attribute_map = {
        'associated_containers_count': 'associatedContainersCount',
        'associated_hosts_count': 'associatedHostsCount',
        'created': 'created',
        'image_id': 'imageId',
        'is_docker_hub_official': 'isDockerHubOfficial',
        'last_scanned': 'lastScanned',
        'registry_uuid': 'registryUuid',
        'repo': 'repo',
        'sha': 'sha',
        'size': 'size',
        'source': 'source',
        'uuid': 'uuid',
        'vulnerabilities': 'vulnerabilities'
    }

    def __init__(self, associated_containers_count=None, associated_hosts_count=None, created=None, image_id=None, is_docker_hub_official=None, last_scanned=None, registry_uuid=None, repo=None, sha=None, size=None, source=None, uuid=None, vulnerabilities=None, local_vars_configuration=None):  # noqa: E501
        """AbstractImage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._associated_containers_count = None
        self._associated_hosts_count = None
        self._created = None
        self._image_id = None
        self._is_docker_hub_official = None
        self._last_scanned = None
        self._registry_uuid = None
        self._repo = None
        self._sha = None
        self._size = None
        self._source = None
        self._uuid = None
        self._vulnerabilities = None
        self.discriminator = None

        if associated_containers_count is not None:
            self.associated_containers_count = associated_containers_count
        if associated_hosts_count is not None:
            self.associated_hosts_count = associated_hosts_count
        if created is not None:
            self.created = created
        if image_id is not None:
            self.image_id = image_id
        if is_docker_hub_official is not None:
            self.is_docker_hub_official = is_docker_hub_official
        if last_scanned is not None:
            self.last_scanned = last_scanned
        if registry_uuid is not None:
            self.registry_uuid = registry_uuid
        if repo is not None:
            self.repo = repo
        if sha is not None:
            self.sha = sha
        if size is not None:
            self.size = size
        if source is not None:
            self.source = source
        if uuid is not None:
            self.uuid = uuid
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities

    @property
    def associated_containers_count(self):
        """Gets the associated_containers_count of this AbstractImage.  # noqa: E501


        :return: The associated_containers_count of this AbstractImage.  # noqa: E501
        :rtype: int
        """
        return self._associated_containers_count

    @associated_containers_count.setter
    def associated_containers_count(self, associated_containers_count):
        """Sets the associated_containers_count of this AbstractImage.


        :param associated_containers_count: The associated_containers_count of this AbstractImage.  # noqa: E501
        :type: int
        """

        self._associated_containers_count = associated_containers_count

    @property
    def associated_hosts_count(self):
        """Gets the associated_hosts_count of this AbstractImage.  # noqa: E501


        :return: The associated_hosts_count of this AbstractImage.  # noqa: E501
        :rtype: int
        """
        return self._associated_hosts_count

    @associated_hosts_count.setter
    def associated_hosts_count(self, associated_hosts_count):
        """Sets the associated_hosts_count of this AbstractImage.


        :param associated_hosts_count: The associated_hosts_count of this AbstractImage.  # noqa: E501
        :type: int
        """

        self._associated_hosts_count = associated_hosts_count

    @property
    def created(self):
        """Gets the created of this AbstractImage.  # noqa: E501


        :return: The created of this AbstractImage.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AbstractImage.


        :param created: The created of this AbstractImage.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def image_id(self):
        """Gets the image_id of this AbstractImage.  # noqa: E501


        :return: The image_id of this AbstractImage.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this AbstractImage.


        :param image_id: The image_id of this AbstractImage.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def is_docker_hub_official(self):
        """Gets the is_docker_hub_official of this AbstractImage.  # noqa: E501


        :return: The is_docker_hub_official of this AbstractImage.  # noqa: E501
        :rtype: bool
        """
        return self._is_docker_hub_official

    @is_docker_hub_official.setter
    def is_docker_hub_official(self, is_docker_hub_official):
        """Sets the is_docker_hub_official of this AbstractImage.


        :param is_docker_hub_official: The is_docker_hub_official of this AbstractImage.  # noqa: E501
        :type: bool
        """

        self._is_docker_hub_official = is_docker_hub_official

    @property
    def last_scanned(self):
        """Gets the last_scanned of this AbstractImage.  # noqa: E501


        :return: The last_scanned of this AbstractImage.  # noqa: E501
        :rtype: str
        """
        return self._last_scanned

    @last_scanned.setter
    def last_scanned(self, last_scanned):
        """Sets the last_scanned of this AbstractImage.


        :param last_scanned: The last_scanned of this AbstractImage.  # noqa: E501
        :type: str
        """

        self._last_scanned = last_scanned

    @property
    def registry_uuid(self):
        """Gets the registry_uuid of this AbstractImage.  # noqa: E501


        :return: The registry_uuid of this AbstractImage.  # noqa: E501
        :rtype: list[str]
        """
        return self._registry_uuid

    @registry_uuid.setter
    def registry_uuid(self, registry_uuid):
        """Sets the registry_uuid of this AbstractImage.


        :param registry_uuid: The registry_uuid of this AbstractImage.  # noqa: E501
        :type: list[str]
        """

        self._registry_uuid = registry_uuid

    @property
    def repo(self):
        """Gets the repo of this AbstractImage.  # noqa: E501


        :return: The repo of this AbstractImage.  # noqa: E501
        :rtype: list[Repo]
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this AbstractImage.


        :param repo: The repo of this AbstractImage.  # noqa: E501
        :type: list[Repo]
        """

        self._repo = repo

    @property
    def sha(self):
        """Gets the sha of this AbstractImage.  # noqa: E501


        :return: The sha of this AbstractImage.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this AbstractImage.


        :param sha: The sha of this AbstractImage.  # noqa: E501
        :type: str
        """

        self._sha = sha

    @property
    def size(self):
        """Gets the size of this AbstractImage.  # noqa: E501


        :return: The size of this AbstractImage.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AbstractImage.


        :param size: The size of this AbstractImage.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def source(self):
        """Gets the source of this AbstractImage.  # noqa: E501


        :return: The source of this AbstractImage.  # noqa: E501
        :rtype: list[str]
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AbstractImage.


        :param source: The source of this AbstractImage.  # noqa: E501
        :type: list[str]
        """

        self._source = source

    @property
    def uuid(self):
        """Gets the uuid of this AbstractImage.  # noqa: E501


        :return: The uuid of this AbstractImage.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AbstractImage.


        :param uuid: The uuid of this AbstractImage.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this AbstractImage.  # noqa: E501


        :return: The vulnerabilities of this AbstractImage.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this AbstractImage.


        :param vulnerabilities: The vulnerabilities of this AbstractImage.  # noqa: E501
        :type: dict(str, int)
        """

        self._vulnerabilities = vulnerabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractImage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbstractImage):
            return True

        return self.to_dict() != other.to_dict()
